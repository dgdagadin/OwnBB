<?php/********************************************************* * имя класса: OwnBB_Captcha * функция класса: генерация защитной картинки (Captcha)  ********************************************************/Class OwnBB_Captcha {	/*	//////////////////////	/////СВОЙСТВА/////////	//////////////////////	*/	/**	 * высота капчи	 * (integer)	 */	var $Width;	/**	 * ширина капчи	 * (integer)	 */	var $Height;	/**	 * размер каждой точки на фоне	 * (integer)	 */	var $DotFontSize;	/**	 * размер основных символов капчи	 * (integer)	 */	var $MainFontSize;	/**	 * количество точек на фоне капчи	 * (string)	 */	var $NumDots;	/**	 * количество линий на фоне капчи	 * (string)	 */	var $NumLines;	/**	 * количество основных символов капчи	 * (integer)	 */	var $NumLetters;		/**	 * массив шрифтов	 * (array)	 */	var $FontsArray;		/**	 * массив символов для капчи	 * (array)	 */	var $LettersArray;		/**	 * массив цветов для капчи	 * (array)	 */	var $ColorsArray;		/**	 * путь к папке со шрифтами	 * (string)	 */	var $FontPath;	/*	//////////////////////	/////МЕТОДЫ///////////	//////////////////////	*/	/**	 * Конструктор класса - инициализация. Параметры:    	 *   array  $Config_Captcha   настройки captcha в конфиге       	 * -	 */	function __construct ($Config_Captcha) {		global $CaptchaLetters, $CaptchaColors;		$this->Width        = $Config_Captcha['Width'];		$this->Height       = $Config_Captcha['Height'];		$this->DotFontSize  = $Config_Captcha['DotFontSize'];		$this->MainFontSize = $Config_Captcha['MainFontSize'];		$this->NumDots      = $Config_Captcha['NumDots'];		$this->NumLines     = $Config_Captcha['NumLines'];		$this->NumLetters   = $Config_Captcha['NumLetters'];		$this->LettersArray = $CaptchaLetters;		$this->ColorsArray  = $CaptchaColors;		$this->FontPath     = $Config_Captcha['FontPath'];		$this->FontsArray   = $this->GetCaptchaFonts ();	}	/**	 * Генерирует Captcha. Параметры:	 *   resource  $ImgResource   ресурс изображения      	 * (resource)	 */	public function GenerateCapcha () {		$ImgRes = $this->CreateCaptchaResource ();		$ImgRes = $this->SetCaptchaFon ($ImgRes);		$ImgRes = $this->SetCaptchaLetters ($ImgRes);		$this->ShowGifImage ($ImgRes);	}	/**	 * Создает буквы капчи. Параметры:	 *   resource  $ImgResource   ресурс изображения      	 * (resource)	 */	public function SetCaptchaLetters ($ImgResource) {		$Height       = $this->Height;		$NumLetters   = $this->NumLetters;		$LettersArray = $this->LettersArray;		$ColorsArray  = $this->ColorsArray;		$FontsArray   = $this->FontsArray;		$NumFonts     = sizeof ($FontsArray);		$FontSize     = $this->MainFontSize;		$LettersSize  = sizeof ($LettersArray);		$ColorsSize    = sizeof ($ColorsArray);		$LetterCode   = array ();		if ($NumLetters < 1) {			$NumLetters = 1;		}		$XMixing = rand (15, 40);		for ($i = 0; $i < $NumLetters; $i++) {			$LetterColor = imagecolorallocatealpha ($ImgResource, rand (0, 240), rand (0, 240), rand(0, 240), 100);			$LetterKey = rand (0, $LettersSize - 1);			$Letter = $LettersArray[$LetterKey];			$LetterCode[] = $Letter;			$Letter = strtoupper ($Letter);			$ColorKey = rand (0, $ColorsSize - 1);			$Color  = $ColorsArray[$ColorKey];			$LetterSize = rand($FontSize * 2 - 2, $FontSize * 2 + 2);			$FontKey = rand (0, $NumFonts - 1);			$Font = $this->FontPath . '/' . $FontsArray[$FontKey];			$X = ($i + 1) * $FontSize + 20 * ($i - 1) + $XMixing;			$Y = (($Height * 2) / 3) + rand (0, 5);			$Angle = rand (-20, 20);			imagettftext ($ImgResource, $LetterSize, $Angle, $X, $Y, $Color, $Font, $Letter);		}		$this->SetCapchaSession ($LetterCode);		return ($ImgResource);	}	/**	 * Создает фон капчи. Параметры:    	 *   resource  $ImgResource   ресурс изображения       	 * (resource)	 */	public function SetCaptchaFon ($ImgResource) {		$FontPath = $this->FontPath;		$Width    = $this->Width;		$Height   = $this->Height;		$NumLines = $this->NumLines;		$NumDots  = $this->NumDots;		$DotSize  = $this->DotFontSize;		$DotCol   = $this->ColorsArray;		$DotFont  = $FontPath . '/' . $this->FontsArray[0];		$BGCaptcha = imagecolorallocate($ImgResource, rand (235, 255), rand (235, 255), rand (235, 255));		imagefill ($ImgResource, 0, 0, $BGCaptcha);		for ($i = 0; $i < $NumLines; $i++) {			$XArray = $this->GetRandValues ($Width,  15);			$YArray = $this->GetRandValues ($Height, 10);			$LineColor = imagecolorallocate($ImgResource, rand (0, 255), rand (0, 255), rand (0, 255));			imageline ($ImgResource, $XArray[0], $YArray[0], $XArray[1], $YArray[1], $LineColor);		}		for ($i = 0; $i < $NumDots; $i++) {			$DotColor = imagecolorallocatealpha ($ImgResource, rand (0, 255), rand (0, 255), rand(0, 255), 100);			$X = rand (0, $Width);			$Y = rand (0, $Height);			$Angle = 0;			$DotText = '.';			imagettftext ($ImgResource, $DotSize, $Angle, $X, $Y, $DotColor, $DotFont, $DotText);		}		return ($ImgResource);	}	/**	 * Возвращает ресурс изображения капчи. Параметры:    	 *   -       	 * (resource)	 */	public function CreateCaptchaResource () {		$Width  = $this->Width;		$Height = $this->Height;		$CaptchaSrc = imagecreatetruecolor($Width, $Height);		return ($CaptchaSrc);	}	/**	 * Возвращает массив шрифтов для капчи. Параметры:    	 *   string  $FontPath        путь к папке со шрифтами       	 * (array)	 */	public function GetCaptchaFonts () {		$FontDir = $this->FontPath;		$Result = array ();		$FontHandler = opendir($FontDir);		while (($FontFile = readdir($FontHandler)) !== false) {			$FileNameArr = explode ('.', $FontFile);			if (Main_Strtolower (array_pop ($FileNameArr)) == 'ttf') {				$Result[] = $FontFile;			}		}		closedir($FontHandler);		return ($Result);	}	/**	 * Возвращает случайную пару однотипных координат капчи. Параметры:    	 *   -	 * (array)	 */	public function GetRandValues ($Max, $MinDiff) {		$Start = rand (0, $Max);		$End   = rand (0, $Max);		if (($End - $Start) < $MinDiff) {			$End = $Start + $MinDiff;		}		$Result = array ($Start, $End);		return ($Result);	}	/**	 * Выводит на экран сгенерированную картинку. Параметры:    	 *   resource  $ImgResource   ресурс картинки     	 * -	 */	public function ShowGifImage ($ImgResource) {		Header ("Content-type: image/gif");         		imagegif ($ImgResource);	}	/**	 * Присваивает значение капчи в сессию. Параметры:    	 *   array  $CaptchaArray     значение капчи       	 * -	 */	public function SetCapchaSession ($CaptchaArray) {		$CaptchaVal = implode ('', $CaptchaArray);		$_SESSION['CapchaValue'] = Main_Strtolower ($CaptchaVal);	}}?>